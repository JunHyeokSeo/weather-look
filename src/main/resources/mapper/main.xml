<?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="main">

	<select id="mainlist" parameterType="search"
		resultType="mainboard">
		select * from
		(select rownum rnum, m1.* from
		(select 'daily'
		as type_name, post_id, title, reg_date from daily
		union
		select 'review'
		as
		type_name, post_id, title, reg_date from review
		order by reg_date
		desc) m1)
		where rnum &gt;= #{startrow} and rnum &lt;= #{endrow}
	</select>

	<select id="maincount" parameterType="search" resultType="int">
		select
		count(*) maincount from
		(select 'daily' as type_name, post_id, title,
		reg_date from daily
		union
		select 'review' as type_name, post_id, title,
		reg_date from review
		order by reg_date desc)
	</select>

	<select id="searchlist" parameterType="search"
		resultType="searchresult">
		select 'daily' as type_name, title, post_id, nick, reg_date from daily
		<where>
			<if test="keyword != null and keyword != ''">
				AND (nick LIKE '%' || #{keyword} || '%' OR title LIKE '%'
				|| #{keyword}
				|| '%' OR content LIKE '%' || #{keyword} || '%')
			</if>
		</where>
		union
		select 'review' as type_name, title, post_id, nick, reg_date from
		review
		<where>
			<if test="keyword != null and keyword != ''">
				AND (nick LIKE '%' || #{keyword} || '%' OR title LIKE '%'
				|| #{keyword}
				|| '%' OR content LIKE '%' || #{keyword} || '%')
			</if>
		</where>
		union
		select 'community' as type_name, title, post_id, nick, reg_date
		from
		community
		<where>
			<if test="keyword != null and keyword != ''">
				AND (nick LIKE '%' || #{keyword} || '%' OR title LIKE '%'
				|| #{keyword}
				|| '%' OR content LIKE '%' || #{keyword} || '%')
			</if>
		</where>
		order by reg_date
	</select>

	<select id="searchcount" parameterType="search" resultType="int">
		select count(*) searchcount from
		(select 'daily' as type_name, title,
		post_id, nick, reg_date from daily
		<where>
			<if test="keyword != null and keyword != ''">
				AND (nick LIKE '%' || #{keyword} || '%' OR title LIKE '%'
				|| #{keyword}
				|| '%' OR content LIKE '%' || #{keyword} || '%')
			</if>
		</where>
		union
		select 'review' as type_name, title, post_id, nick, reg_date from
		review
		<where>
			<if test="keyword != null and keyword != ''">
				AND (nick LIKE '%' || #{keyword} || '%' OR title LIKE '%'
				|| #{keyword}
				|| '%' OR content LIKE '%' || #{keyword} || '%')
			</if>
		</where>
		union
		select 'community' as type_name, title, post_id, nick, reg_date
		from
		community
		<where>
			<if test="keyword != null and keyword != ''">
				AND (nick LIKE '%' || #{keyword} || '%' OR title LIKE '%'
				|| #{keyword}
				|| '%' OR content LIKE '%' || #{keyword} || '%')
			</if>
		</where>
		order by reg_date)
	</select>

	<!-- 상위 복구 완료 지점 -->

	<select id="weather" parameterType="search"
		resultType="mainboard">

		select * from daily where temperature &gt;=
		(#{weather.temperature}-5) and
		temperature &lt;=
		(#{weather.temperature}+5)

	</select>




	<!-- ========== reportpage ========== -->

	<select id="reportlist" parameterType="search"
		resultType="report">

		select * from (
		select rownum rnum, re2.* from(
		select re1.* from
		(select daily_report.*, 'daily' as type_name, daily.title from daily_report
		left join daily
		on daily_report.post_id = daily.post_id
		union
		select review_report.*, 'review' as type_name, review.title from
		review_report
		left join review
		on review_report.post_id = review.post_id
		union
		select community_report.*, 'community' as type_name, community.title from
		community_report
		left join community
		on community_report.post_id = community.post_id) re1
		order by report_date desc) re2)
		where rnum &gt;= #{startrow} and rnum &lt;=
		#{endrow}

	</select>

	<select id="reportcount" parameterType="search" resultType="int">
		select count(*) reports from
		(select daily_report.*, 'daily' as
		type_name, daily.title from daily_report
		left join daily
		on
		daily_report.post_id = daily.post_id
		union
		select review_report.*,
		'review' as type_name, review.title from
		review_report
		left join review
		on review_report.post_id = review.post_id
		union
		select
		community_report.*, 'community' as type_name, community.title from
		community_report
		left join community
		on community_report.post_id =
		community.post_id)
		order by report_date desc
	</select>


</mapper>







