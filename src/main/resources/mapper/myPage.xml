<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="myPage">
	<!--전체 글 개수-->
	<select id="count" resultType="int">
		with allpost as (select POST_ID, TITLE, READ_COUNT, REG_DATE, CONTENT, NICK
		                 from DAILY
		                 union
		                 select POST_ID, TITLE, READ_COUNT, REG_DATE, CONTENT, NICK
		                 from REVIEW
		                 union
		                 select POST_ID, TITLE, READ_COUNT, REG_DATE, CONTENT, NICK
		                 from COMMUNITY)
		select count(*)
		from allpost
		where NICK like '%준혁%'
	</select>

	<!--작성글 목록-->
	<select id="post_list" parameterType="String" resultType="Board">
		with allpost as (select POST_ID, TITLE, READ_COUNT, REG_DATE, CONTENT, NICK
		                 from DAILY
		                 union
		                 select POST_ID, TITLE, READ_COUNT, REG_DATE, CONTENT, NICK
		                 from REVIEW
		                 union
		                 select POST_ID, TITLE, READ_COUNT, REG_DATE, CONTENT, NICK
		                 from COMMUNITY)
		select *
		from allpost
		where NICK = #{nick}
		order by REG_DATE desc
	</select>

	<!--작성 댓글 목록-->
	<select id="comment_list" parameterType="String" resultType="Comment">
		with allcomment as (select *
		                    from DAILY_REPLY
		                    union
		                    select *
		                    from REVIEW_REPLY
		                    union
		                    select *
		                    from COMMUNITY_REPLY)
		select *
		from allcomment
		where NICK = #{nick}
		order by RE_REGDATE desc
	</select>

	<!--유저 객체 얻어오기-->
	<select id="get_member" parameterType="String" resultType="Member">
		select *
		from MEMBER
		where NICK = #{nick}
	</select>

	<!--좋아요 목록-->
	<select id="like_list" parameterType="String" resultType="Like">
		with allLike as (select DL.LIKE_ID, DL.POST_ID, DAILY.TITLE, DAILY.NICK as writer_nick
		                 from DAILY_LIKE DL, DAILY
		                 where DL.POST_ID = DAILY.POST_ID and
		                       DL.NICK = #{nick}
		                 union
		                 select RL.LIKE_ID, RL.POST_ID, REVIEW.TITLE, REVIEW.NICK as writer_nick
		                 from REVIEW_LIKE RL, REVIEW
		                 where RL.POST_ID = REVIEW.POST_ID and
		                       RL.NICK = #{nick}
		                 union
		                 select CL.LIKE_ID, CL.POST_ID, COMMUNITY.TITLE, COMMUNITY.NICK as writer_nick
		                 from COMMUNITY_LIKE CL, COMMUNITY
		                 where CL.POST_ID = COMMUNITY.POST_ID and
		                       CL.NICK = #{nick})
		select *
		from allLike
		order by LIKE_ID desc
	</select>

	<!--스크랩 목록-->
	<select id="scrap_list" parameterType="String" resultType="Scrap">
		with allScrap as (select DS.SCRAP_ID, DS.POST_ID, DAILY.TITLE, DAILY.NICK as writer_nick
		                  from DAILY_SCRAP DS, DAILY
		                  where DS.POST_ID = DAILY.POST_ID and
		                        DS.NICK = #{nick}
		                  union
		                  select RS.SCRAP_ID, RS.POST_ID, REVIEW.TITLE, REVIEW.NICK as writer_nick
		                  from REVIEW_SCRAP RS, REVIEW
		                  where RS.POST_ID = REVIEW.POST_ID and
		                        RS.NICK = #{nick}
		                  union
		                  select CS.SCRAP_ID, CS.POST_ID, COMMUNITY.TITLE, COMMUNITY.NICK as writer_nick
		                  from COMMUNITY_SCRAP CS, COMMUNITY
		                  where CS.POST_ID = COMMUNITY.POST_ID and
		                        CS.NICK = #{nick})
		select *
		from allScrap
		order by SCRAP_ID desc
	</select>

	<!--회원정보 수정-->
	<update id="updateMember" parameterType="member">
		update MEMBER
		set PASSWD=#{passwd},
		    PROFILE_IMAGE=#{profile_image, jdbcType=VARCHAR},
		    ADDRESS=#{address},
		    PHONE=#{phone},
		    TOKEN=#{token, jdbcType=VARCHAR},
		    ADMIN_ROLE=#{admin_role}
		where NICK = #{nick}
	</update>

	<delete id="deleteMember" parameterType="String">
		delete from MEMBER where NICK = #{nick}
	</delete>
</mapper>








